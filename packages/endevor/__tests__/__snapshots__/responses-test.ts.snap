// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Endevor responses type parsing Endevor configurations response type parsing should parse a response with any data 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "some_name": "blah",
      },
      Object {
        "some_different_name": "blah",
      },
      Object {
        "description": "real description",
        "name": "real_name",
      },
    ],
    "messages": Array [
      "message 1",
      "message 2",
    ],
    "returnCode": 8,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor configurations response type parsing should throw an error for a response without data 1`] = `"Invalid value null supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/1: { data: Array<unknown> }/data: Array<unknown>"`;

exports[`Endevor responses type parsing Endevor configurations response type parsing should throw an error for a response without or incorrect messages 1`] = `"Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>"`;

exports[`Endevor responses type parsing Endevor configurations response type parsing should throw an error for a response without or incorrect messages 2`] = `
"Invalid value 1234 supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>/0: string
Invalid value {\\"invalid\\":\\"invalid\\"} supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>/1: string"
`;

exports[`Endevor responses type parsing Endevor configurations response type parsing should throw an error for a response without or incorrect return code 1`] = `"Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/returnCode: ReturnCode"`;

exports[`Endevor responses type parsing Endevor configurations response type parsing should throw an error for a response without or incorrect return code 2`] = `"Invalid value \\"8\\" supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/returnCode: ReturnCode"`;

exports[`Endevor responses type parsing Endevor configurations response type parsing should throw an error for a response without or incorrect status code 1`] = `"Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/statusCode: number"`;

exports[`Endevor responses type parsing Endevor configurations response type parsing should throw an error for a response without or incorrect status code 2`] = `"Invalid value \\"200\\" supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/statusCode: number"`;

exports[`Endevor responses type parsing Endevor element dependencies response type parsing should parse a response with any dependencies 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "components": Array [
          undefined,
          Object {
            "is_it_dependency": "noooooo",
          },
        ],
      },
    ],
    "messages": Array [
      "Relax, everything will be fine!",
    ],
    "returnCode": 0,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor element dependencies response type parsing should throw an error for a response without data 1`] = `
"Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<{ components: (Array<unknown> | undefined) }> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<{ components: (Array<unknown> | undefined) }> })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>
Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<{ components: (Array<unknown> | undefined) }> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<{ components: (Array<unknown> | undefined) }> })/1: { data: Array<{ components: (Array<unknown> | undefined) }> }/data: Array<{ components: (Array<unknown> | undefined) }>"
`;

exports[`Endevor responses type parsing Endevor element types response type parsing should parse a response with any data 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "whaaat": "whaaaat???",
      },
      Object {
        "whatttttt": "whattttt??",
      },
      Object {
        "envName": "test",
        "nextType": "next-type",
        "stgId": "D",
        "sysName": "test-sys",
        "typeName": "test-type",
      },
    ],
    "messages": Array [
      "message 1",
      "message 2",
    ],
    "returnCode": 8,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor element types response type parsing should throw an error for a response without data 1`] = `"Invalid value null supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/1: { data: Array<unknown> }/data: Array<unknown>"`;

exports[`Endevor responses type parsing Endevor elements response type parsing should parse a response with any data 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "whaaat": "whaaaat???",
      },
      Object {
        "whatttttt": "whattttt??",
      },
      Object {
        "elmName": "test-elm",
        "envName": "test",
        "fullElmName": "test-full-name",
        "nosource": "N",
        "sbsName": "test-subsys",
        "stgNum": 1,
        "sysName": "test-sys",
        "typeName": "test-type",
      },
    ],
    "messages": Array [
      "message 1",
      "message 2",
    ],
    "returnCode": 8,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor elements response type parsing should throw an error for a response without data 1`] = `"Invalid value null supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/1: { data: Array<unknown> }/data: Array<unknown>"`;

exports[`Endevor responses type parsing Endevor environment stages response type parsing should parse a response with any data 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "whaaat": "whaaaat???",
      },
      Object {
        "whatttttt": "whattttt??",
      },
      Object {
        "envName": "test",
        "nextEnv": "next-test",
        "nextStgNum": 2,
        "stgId": "D",
        "stgNum": 1,
      },
    ],
    "messages": Array [
      "message 1",
      "message 2",
    ],
    "returnCode": 8,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor environment stages response type parsing should throw an error for a response without data 1`] = `"Invalid value null supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/1: { data: Array<unknown> }/data: Array<unknown>"`;

exports[`Endevor responses type parsing Endevor print element and listing response type parsing should parse a proper response 1`] = `
Object {
  "body": Object {
    "data": Array [
      "very important content",
    ],
    "messages": Array [],
    "returnCode": 0,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor print element and listing response type parsing should throw an error for a response with incorrect data 1`] = `
"Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>
Invalid value {\\"firstParagraph\\":\\"blah\\",\\"secondParagraph\\":\\"blahblah\\"} supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) })/1: { data: (Array<string> | null) }/data: (Array<string> | null)/0: Array<string>/0: string
Invalid value [{\\"firstParagraph\\":\\"blah\\",\\"secondParagraph\\":\\"blahblah\\"}] supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) })/1: { data: (Array<string> | null) }/data: (Array<string> | null)/1: null"
`;

exports[`Endevor responses type parsing Endevor print element and listing response type parsing should throw an error for a response without data 1`] = `
"Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) })/0: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>
Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) })/1: { data: (Array<string> | null) }/data: (Array<string> | null)/0: Array<string>
Invalid value undefined supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: (Array<string> | null) })/1: { data: (Array<string> | null) }/data: (Array<string> | null)/1: null"
`;

exports[`Endevor responses type parsing Endevor retrieve element response type parsing should parse a proper response 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "data": Array [
          118,
          101,
          114,
          121,
          32,
          105,
          109,
          112,
          111,
          114,
          116,
          97,
          110,
          116,
          32,
          99,
          111,
          110,
          116,
          101,
          110,
          116,
        ],
        "type": "Buffer",
      },
    ],
    "messages": Array [
      "Relax, everything will be fine!",
    ],
    "returnCode": 0,
    "statusCode": 200,
  },
  "headers": Object {
    "fingerprint": "fingerprint",
  },
}
`;

exports[`Endevor responses type parsing Endevor retrieve element response type parsing should parse a proper response without fingerprint 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "data": Array [
          118,
          101,
          114,
          121,
          32,
          105,
          109,
          112,
          111,
          114,
          116,
          97,
          110,
          116,
          32,
          99,
          111,
          110,
          116,
          101,
          110,
          116,
        ],
        "type": "Buffer",
      },
    ],
    "messages": Array [
      "Relax, everything will be fine!",
    ],
    "returnCode": 0,
    "statusCode": 400,
  },
  "headers": Object {},
}
`;

exports[`Endevor responses type parsing Endevor retrieve element response type parsing should throw an error for a response with incorrect data 1`] = `"Invalid value {\\"firstParagraph\\":\\"blah\\",\\"secondParagraph\\":\\"blahblah\\"} supplied to : { headers: Partial<{ fingerprint: string }>, body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<Buffer> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<Buffer> })/1: { data: Array<Buffer> }/data: Array<Buffer>/0: Buffer"`;

exports[`Endevor responses type parsing Endevor retrieve element response type parsing should throw an error for a response without data 1`] = `"Invalid value undefined supplied to : { headers: Partial<{ fingerprint: string }>, body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<Buffer> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<Buffer> })/1: { data: Array<Buffer> }/data: Array<Buffer>"`;

exports[`Endevor responses type parsing Endevor subsystems response type parsing should parse a response with any data 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "whaaat": "whaaaat???",
      },
      Object {
        "whatttttt": "whattttt??",
      },
      Object {
        "envName": "test",
        "nextSbs": "next-subsys",
        "sbsName": "test-subsys",
        "stgId": "D",
        "sysName": "test-sys",
      },
    ],
    "messages": Array [
      "message 1",
      "message 2",
    ],
    "returnCode": 8,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor subsystems response type parsing should throw an error for a response without data 1`] = `"Invalid value null supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/1: { data: Array<unknown> }/data: Array<unknown>"`;

exports[`Endevor responses type parsing Endevor systems response type parsing should parse a response with any data 1`] = `
Object {
  "body": Object {
    "data": Array [
      Object {
        "whaaat": "whaaaat???",
      },
      Object {
        "whatttttt": "whattttt??",
      },
      Object {
        "envName": "test",
        "nextSys": "next-sys",
        "stgId": "D",
        "sysName": "test-sys",
      },
    ],
    "messages": Array [
      "message 1",
      "message 2",
    ],
    "returnCode": 8,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor systems response type parsing should throw an error for a response without data 1`] = `"Invalid value null supplied to : { body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> }) }/body: ({ statusCode: number, returnCode: ReturnCode, messages: Array<string> } & { data: Array<unknown> })/1: { data: Array<unknown> }/data: Array<unknown>"`;

exports[`Endevor responses type parsing Endevor update and generate response type parsing should parse a proper response 1`] = `
Object {
  "body": Object {
    "messages": Array [
      "Relax, everything will be fine!",
    ],
    "returnCode": 0,
    "statusCode": 200,
  },
}
`;

exports[`Endevor responses type parsing Endevor update and generate response type parsing should throw an error for a response with incorrect messages 1`] = `"Invalid value {\\"messageValue\\":\\"Relax, everything will be fine!\\"} supplied to : { body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> } }/body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>"`;

exports[`Endevor responses type parsing Endevor update and generate response type parsing should throw an error for a response with incorrect return code 1`] = `"Invalid value \\"8\\" supplied to : { body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> } }/body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/returnCode: ReturnCode"`;

exports[`Endevor responses type parsing Endevor update and generate response type parsing should throw an error for a response with incorrect status code 1`] = `"Invalid value \\"400\\" supplied to : { body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> } }/body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/statusCode: number"`;

exports[`Endevor responses type parsing Endevor update and generate response type parsing should throw an error for a response without messages 1`] = `"Invalid value undefined supplied to : { body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> } }/body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/messages: Array<string>"`;

exports[`Endevor responses type parsing Endevor update and generate response type parsing should throw an error for a response without return code 1`] = `"Invalid value undefined supplied to : { body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> } }/body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/returnCode: ReturnCode"`;

exports[`Endevor responses type parsing Endevor update and generate response type parsing should throw an error for a response without status code 1`] = `"Invalid value undefined supplied to : { body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> } }/body: { statusCode: number, returnCode: ReturnCode, messages: Array<string> }/statusCode: number"`;

exports[`Endevor responses type parsing Endevor v1 api response type parsing should parse a response with version header 1`] = `
Object {
  "headers": Object {
    "api-version": "1.1",
  },
}
`;

exports[`Endevor responses type parsing Endevor v1 api response type parsing should throw an error for a response with incorrect version header 1`] = `"Invalid value 1.1 supplied to : { headers: { api-version: string } }/headers: { api-version: string }/api-version: string"`;

exports[`Endevor responses type parsing Endevor v1 api response type parsing should throw an error for a response without version header 1`] = `"Invalid value undefined supplied to : { headers: { api-version: string } }/headers: { api-version: string }/api-version: string"`;

exports[`Endevor responses type parsing Endevor v2 api response type parsing should parse a response with version header 1`] = `
Object {
  "headers": Object {
    "version": "2.5",
  },
}
`;

exports[`Endevor responses type parsing Endevor v2 api response type parsing should throw an error for a response with incorrect version header 1`] = `"Invalid value 2.5 supplied to : { headers: { version: string } }/headers: { version: string }/version: string"`;

exports[`Endevor responses type parsing Endevor v2 api response type parsing should throw an error for a response without version header 1`] = `"Invalid value undefined supplied to : { headers: { version: string } }/headers: { version: string }/version: string"`;
