const { toDep } = require('./toDep');
const { writeFile } = require('fs').promises;
const validate = require('schema-utils');

const pluginName = 'BundledDependenciesWebpackPlugin';
const nl = '\n';

const deps = [];

// schema for options object
const schema = {
  type: 'object',
  properties: {
    depsListFile: {
      type: 'string',
    },
    depsDetailsFile: {
      type: 'string',
    },
  },
  additionalProperties: false,
};

class BundledDependenciesPlugin {
  constructor(options = {}) {
    validate(schema, options, {
      name: 'Bundled Dependencies Plugin',
      baseDataPath: 'options',
    });
    this.options = options;
  }
  apply(compiler) {
    const { depsListFile, depsDetailsFile } = this.options;
    compiler.hooks.emit.tapAsync(pluginName, (compilation, callback) => {
      // Explore each chunk (build output):
      compilation.chunks.forEach((chunk) => {
        // Explore each module within the chunk (built inputs):
        chunk.getModules().forEach((module) => {
          // Explore each source file path that was included into the module:
          module.buildInfo &&
            module.buildInfo.fileDependencies &&
            module.buildInfo.fileDependencies.forEach((filepath) => {
              deps.push(toDep(filepath));
            });
        });

        //   // Explore each asset filename generated by the chunk:
        //   chunk.files.forEach((filename) => {
        //     // Get the asset source for each file generated by the chunk:
        //     var source = compilation.assets[filename].source();
        //   });
      });

      callback();
    });
    compiler.hooks.done.tapPromise(pluginName, async (
      stats /* stats is passed as an argument when done hook is tapped.  */
    ) => {
      const uniqueDeps = [
        ...new Set(
          deps.map((dep) => `${dep.package.name}@${dep.package.version}`)
        ),
      ];
      console.log(`This compilation used ${uniqueDeps.length} dependencies.`);
      await Promise.all([
        writeFile(depsListFile, uniqueDeps.join(nl) + nl),
        writeFile(depsDetailsFile, JSON.stringify(deps, null, 2)),
      ]);
    });
  }
}

module.exports = BundledDependenciesPlugin;
